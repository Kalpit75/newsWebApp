@model newsWebApp.Models.NewsViewModel
@{
    ViewData["Title"] = "News Page";
}

<style>
    .news-list { list-style: none; padding: 0; }
    .news-item { margin-bottom: 2em; padding: 1em; border-bottom: 1px solid #e0e0e0; background: #fafbfc; border-radius: 6px; }
    .news-title { font-weight: bold; font-size: 1.15em; margin-bottom: 0.2em; }
    .news-title a { text-decoration: none; color: #1a0dab; }
    .news-title a:hover { text-decoration: underline; }
    .news-meta { color: #666; font-size: 0.95em; margin-bottom: 0.5em; display: block; }
    .news-summary { margin-top: 0.5em; font-size: 1em; color: #222; }
    .load-more-container { text-align: center; margin: 2em 0; }
    .load-more-btn {
        background: #007acc;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s;
    }
    .load-more-btn:hover { background: #005a9e; }
    .load-more-btn:disabled { background: #ccc; cursor: not-allowed; }
    .loading { display: none; color: #666; }
    .category-filter { 
        margin-bottom: 2em; 
        padding: 1.5em; 
        background: #f8f9fa; 
        border-radius: 8px; 
        border: 1px solid #e9ecef;
    }
    .bookmark-btn { border: none !important; }
    .bookmark-btn:hover { background: rgba(0,0,0,0.05) !important; }
    .category-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        font-weight: 500;
        border-radius: 0.375rem;
        margin-left: 0.5rem;
    }
    .filter-info {
        background: #e7f3ff;
        border: 1px solid #b8daff;
        color: #0c5460;
        padding: 0.75rem 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }


    /* Category-specific colors */
    .category-ransomware { background: #dc3545; color: white; } /* Red for Ransomware */
    .category-malware { background: #fd7e14; color: white; } /* Orange for Malware */
    .category-data-breach { background: #6f42c1; color: white; } /* Purple for Data Breach */
    .category-vulnerability { background: #e83e8c; color: white; } /* Pink for Vulnerability */
    .category-phishing { background: #ffc107; color: #212529; } /* Yellow for Phishing */
    .category-apt { background: #6610f2; color: white; } /* Indigo for APT */
    .category-security-update { background: #198754; color: white; } /* Green for Security Update */
    .category-ddos { background: #20c997; color: white; } /* Teal for DDoS */
    .category-ai { background: #DC7A5D; color: white; } /* Blue for AI */
    .category-general { background: #6c757d; color: white; } /* Gray for General */
    
</style>

<!-- Add Font Awesome for bookmark icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Latest Cybersecurity News</h2>
    <a href="/Bookmarks" class="btn btn-outline-primary">
        <i class="fas fa-bookmark"></i> My Bookmarks
    </a>
</div>

<!-- Category Filter Section -->
<div class="category-filter">
    <form method="get" id="categoryForm">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="d-flex align-items-center gap-3">
                    <label for="categorySelect" class="form-label mb-0 fw-bold">
                        <i class="fas fa-filter me-1"></i>Filter by Category:
                    </label>
                    <select id="categorySelect" name="selectedCategory" class="form-select" style="width: auto; min-width: 200px;" onchange="filterByCategory()">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category" selected=@(Model.SelectedCategory == category)>@category</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-6 text-end">
                @if (!string.IsNullOrEmpty(Model.SelectedCategory))
                {
                    <button type="button" onclick="clearFilter()" class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-times me-1"></i>Clear Filter
                    </button>
                }
                <span class="text-muted ms-2">
                    <i class="fas fa-list me-1"></i>@Model.Categories.Count categories available
                </span>
            </div>
        </div>
    </form>
</div>

<ul class="news-list" id="news-list">
    @await Html.PartialAsync("_NewsItemsPartial", Model)
</ul>

@if (Model.HasMoreNews)
{
    <div class="load-more-container">
        <button id="loadMoreBtn" class="load-more-btn" onclick="loadMore()">Load More</button>
        <div id="loading" class="loading">Loading...</div>
        <div id="noMoreNews" style="display: none; color: #666;">No more news to load</div>
    </div>
}

<form method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<script>
    let currentSkip = @Model.PageSize;
    const pageSize = @Model.PageSize;
    const selectedCategory = '@Model.SelectedCategory';

    // Category filter function
    function filterByCategory() {
        const form = document.getElementById('categoryForm');
        form.submit();
    }

    // Clear filter function
    function clearFilter() {
        window.location.href = '/News';
    }

    // Bookmark toggle function
    async function toggleBookmark(newsId, button) {
        try {
            const response = await fetch('/News/ToggleBookmark', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `newsId=${newsId}`
            });

            if (response.ok) {
                const result = await response.json();
                const icon = button.querySelector('i');
                
                if (result.isBookmarked) {
                    icon.className = 'fas fa-bookmark text-warning';
                    button.title = 'Remove bookmark';
                    button.dataset.bookmarked = 'true';
                } else {
                    icon.className = 'far fa-bookmark text-muted';
                    button.title = 'Add bookmark';
                    button.dataset.bookmarked = 'false';
                }
            }
        } catch (error) {
            console.error('Error toggling bookmark:', error);
        }
    }

    // Load more function
    async function loadMore() {
        const btn = document.getElementById('loadMoreBtn');
        const loading = document.getElementById('loading');
        const noMoreNews = document.getElementById('noMoreNews');

        btn.style.display = 'none';
        loading.style.display = 'block';

        try {
            const formData = new FormData();
            formData.append('skip', currentSkip);
            formData.append('pageSize', pageSize);
            formData.append('selectedCategory', selectedCategory);
            formData.append('__RequestVerificationToken', 
                document.querySelector('input[name="__RequestVerificationToken"]').value);

            const response = await fetch('/News/LoadMore', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const html = await response.text();
                
                if (html.trim()) {
                    document.getElementById('news-list').insertAdjacentHTML('beforeend', html);
                    currentSkip += pageSize;
                    
                    const newItems = (html.match(/<li class="news-item">/g) || []).length;
                    
                    if (newItems < pageSize) {
                        noMoreNews.style.display = 'block';
                    } else {
                        btn.style.display = 'block';
                    }
                } else {
                    noMoreNews.style.display = 'block';
                }
            } else {
                btn.textContent = 'Error loading more';
                btn.disabled = true;
            }
        } catch (e) {
            btn.textContent = 'Error loading more';
            btn.disabled = true;
        } finally {
            loading.style.display = 'none';
        }
    }
</script>